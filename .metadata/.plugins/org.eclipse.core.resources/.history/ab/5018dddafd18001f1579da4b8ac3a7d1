package org.jsp.reservation_app.service;

import java.util.Optional;

import org.jsp.reservation_app.dao.AdminDao;
import org.jsp.reservation_app.dto.ResponseStructure;
import org.jsp.reservation_app.exception.AdminNotFoundException;
import org.jsp.reservation_app.model.Admin;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class AdminService {
	@Autowired
	private AdminDao adminDao;

	public ResponseEntity<ResponseStructure<Admin>> saveAdmin(Admin admin) {
		ResponseStructure<Admin> structure = new ResponseStructure<>();

		structure.setMessage("Admin Successfully saved...!!");
		structure.setData(adminDao.saveAdmin(admin));
		structure.setStatusCode(HttpStatus.CREATED.value());

		return ResponseEntity.status(HttpStatus.CREATED).body(structure);
	}

	public ResponseEntity<ResponseStructure<Admin>> update(Admin admin) {
		ResponseStructure<Admin> structure = new ResponseStructure<>();
		Optional<Admin> rec = adminDao.findById(admin.getId());

		if (rec.isPresent()) {

			structure.setData(adminDao.saveAdmin(admin));
			structure.setMessage("Admin Details updated Successfully..!!");
			structure.setStatusCode(HttpStatus.ACCEPTED.value());

			Admin db = rec.get();

			db.setEmail(admin.getEmail());
			db.setName(admin.getName());
			db.setGst_no(admin.getGst_no());
			db.setPassword(admin.getPassword());
			db.setPhone(admin.getPhone());
			db.setTravels_name(admin.getTravels_name());

			return ResponseEntity.status(HttpStatus.ACCEPTED).body(structure);
		}
		throw new AdminNotFoundException("Cannot Update Admin as Id is Invalid");
	}

	public ResponseEntity<ResponseStructure<Admin>> findById(int id) {
		ResponseStructure<Admin> structure = new ResponseStructure<>();
		Optional<Admin> db = adminDao.findById(id);

		if (db.isPresent()) {

			structure.setData(db.get());
			structure.setMessage("Admin found by Id successfully...");
			structure.setStatusCode(HttpStatus.OK.value());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Invalid Admin Id");
	}

	public ResponseEntity<ResponseStructure<Admin>> verifyByPhone(long phone, String password) {
		ResponseStructure<Admin> structure = new ResponseStructure<>();
		Optional<Admin> db = adminDao.verify(phone, password);

		if (db.isPresent()) {

			structure.setData(db.get());
			structure.setMessage("Verification done by phone & password Succesfull...");
			structure.setStatusCode(HttpStatus.OK.value());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Invalid Phone Number or Password");
	}

	public ResponseEntity<ResponseStructure<Admin>> verifyByEmail(String email, String password) {
		ResponseStructure<Admin> structure = new ResponseStructure<>();
		Optional<Admin> db = adminDao.verify(email, password);

		if (db.isPresent()) {

			structure.setData(db.get());
			structure.setMessage("Verification done by email & password Succesfull...");
			structure.setStatusCode(HttpStatus.OK.value());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Invalid Email Id or Password");
	}

	public ResponseEntity<ResponseStructure<String>> delete(int id) {
		ResponseStructure<String> structure = new ResponseStructure<>();
		Optional<Admin> db = adminDao.findById(id);

		if (db.isPresent()) {

			adminDao.delete(id);
			structure.setData("Admin Found");
			structure.setMessage("Admin deleted by Id successfully...");
			structure.setStatusCode(HttpStatus.OK.value());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Cannot delete Admin as Id is Invalid");
	}
}
