package org.jsp.reservation_app.service;

import java.util.Optional;

import org.jsp.reservation_app.dao.UserDao;
import org.jsp.reservation_app.dto.ResponseStructure;
import org.jsp.reservation_app.exception.UserNotFoundException;
import org.jsp.reservation_app.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class UserService {
	@Autowired
	private UserDao userDao;
	
	public ResponseEntity<ResponseStructure<User>> saveUser(User user){
		ResponseStructure<User> structure = new ResponseStructure<>();
		
		structure.setMessage("User Successfully saved...!!");
		structure.setData(userDao.saveUser(user));
		structure.setStatusCode(HttpStatus.CREATED.value());

		return ResponseEntity.status(HttpStatus.CREATED).body(structure);
	}
	
	public ResponseEntity<ResponseStructure<User>> update(User user) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> rec = userDao.findById(user.getId());

		if (rec.isPresent()) {

			structure.setData(userDao.saveUser(user));
			structure.setMessage("User Details updated Successfully..!!");
			structure.setStatusCode(HttpStatus.ACCEPTED.value());

			User db = rec.get();

			db.setEmail(user.getEmail());
			db.setName(user.getName());
			db.setPassword(user.getPassword());
			db.setPhone(user.getPhone());
			db.setAge(user.getAge());
			db.setGender(user.getGender());
			
			return ResponseEntity.status(HttpStatus.ACCEPTED).body(structure);
		}
		throw new UserNotFoundException("Cannot Update User as Id is Invalid");
	}

	public ResponseEntity<ResponseStructure<User>> findById(int id) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> db = userDao.findById(id);

		if (db.isPresent()) {

			structure.setData(db.get());
			structure.setMessage("User found by Id successfully...");
			structure.setStatusCode(HttpStatus.OK.value());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Invalid User Id");
	}

	public ResponseEntity<ResponseStructure<User>> verify(long phone, String password) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> db = userDao.verify(phone, password);

		if (db.isPresent()) {

			structure.setData(db.get());
			structure.setMessage("Verification done by phone & password Succesfull...");
			structure.setStatusCode(HttpStatus.OK.value());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Invalid Phone Number or Password");
	}

	public ResponseEntity<ResponseStructure<User>> verify(String email, String password) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> db = userDao.verify(email, password);

		if (db.isPresent()) {

			structure.setData(db.get());
			structure.setMessage("Verification done by email & password Succesfull...");
			structure.setStatusCode(HttpStatus.OK.value());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Invalid Email Id or Password");
	}

	public ResponseEntity<ResponseStructure<String>> delete(int id) {
		ResponseStructure<String> structure = new ResponseStructure<>();
		Optional<User> db = userDao.findById(id);

		if (db.isPresent()) {

			userDao.delete(id);
			structure.setData("User Found");
			structure.setMessage("User deleted by Id successfully...");
			structure.setStatusCode(HttpStatus.OK.value());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Cannot delete User as Id is Invalid");
	}
}
